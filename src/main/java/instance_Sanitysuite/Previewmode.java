package instance_Sanitysuite;

import io.testproject.java.annotations.v2.Test;
import io.testproject.java.enums.TakeScreenshotConditionType;
import io.testproject.java.sdk.v2.drivers.WebDriver;
import io.testproject.java.sdk.v2.enums.ExecutionResult;
import io.testproject.java.sdk.v2.exceptions.FailureException;
import io.testproject.java.sdk.v2.reporters.TestReporter;
import io.testproject.java.sdk.v2.tests.WebTest;
import io.testproject.java.sdk.v2.tests.helpers.WebTestHelper;
import io.testproject.proxy.addon.ElementExtensions;
import io.testproject.proxy.addon.io.testproject.addons.element.web.DoubleClickNoJs;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

/**
 * This class was automatically generated by TestProject
 * Project: Nutshell automation
 * Test: Mob App 01 (preview)
 * Generated by: Saranya Shanmugam (Saranya.Shanmugam@nutshellapps.co.uk)
 * Generated on Sun Nov 01 01:57:59 GMT 2020.
 */
@Test(
    name = "Mob App 01 (preview)",
    description = "This test was auto generated from steps of the 'Instance - Sanity tests' test",
    version = "1.0"
)
public class Previewmode implements WebTest {
  public ExecutionResult execute(WebTestHelper helper) throws FailureException {
    WebDriver driver = helper.getDriver();
    // set timeout for driver actions (similar to step timeout)
    driver.setTimeout(30000);
    TestReporter report = helper.getReporter();
    By by;
    boolean booleanResult;
    ExecutionResult executionresult;
    DoubleClickNoJs doubleClickNoJs;
   
    //1. mobile app 001 builder
    Actions ac = new Actions(driver); 
    WebElement app001 = driver.findElement(By.id("microapp_2681"));
    ac.doubleClick(app001).perform();    

    // 2. Click 'Publish'
    by = By.cssSelector("#workflow_publish");
    booleanResult = driver.testproject().click(by);
    report.step("Click 'Publish'", booleanResult, TakeScreenshotConditionType.Failure);

    // 3. Click 'CONTINUE'
    //    Private Publishing mode
    by = By.cssSelector("#yes");
    booleanResult = driver.testproject().click(by);
    report.step("Click 'CONTINUE'", booleanResult, TakeScreenshotConditionType.Failure);

   //  4. Click 'CONTINUE'
     //   confirm to Publish - selected users
    by = By.cssSelector("#yes");
    booleanResult = driver.testproject().click(by);
    report.step("Click 'CONTINUE'", booleanResult, TakeScreenshotConditionType.Failure);
    
   //  5. 'DIV10' contains text 'Successfully published to the Test community'?
    driver.setTimeout(50000);
    by = By.xpath("//body/div[4]/div/div");
    booleanResult = driver.testproject().containsText(by,"Successfully published");
    report.step("'DIV10' contains text 'Successfully published'?", booleanResult, TakeScreenshotConditionType.Failure);

    // 7. Click 'DIV1'
    //    To Builder screen    
    by = By.cssSelector("#workflow-back");
    booleanResult = driver.testproject().click(by);
    report.step("Click 'workflow-back'", booleanResult, TakeScreenshotConditionType.Failure);

    // 8. Click 'workflow-back'
    //    Home button
    // set step-specific timeout (will undo this at the end)
    driver.setTimeout(30000);
    by = By.cssSelector("#workflow-back");
    booleanResult = driver.testproject().click(by);
    report.step("Click 'workflow-back'", booleanResult, TakeScreenshotConditionType.Failure);
    driver.setTimeout(15000);

    // 9. Click 'workflow_back_confirm'
    // set step-specific timeout (will undo this at the end)
    driver.setTimeout(30000);
    by = By.id("workflow_back_confirm");
    booleanResult = driver.testproject().click(by);
    report.step("Click 'workflow_back_confirm'", booleanResult, TakeScreenshotConditionType.Failure);
    driver.setTimeout(15000);

    return ExecutionResult.PASSED;
  }
}
